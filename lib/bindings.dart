// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/wallet_base.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class WalletBaseBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletBaseBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletBaseBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> KeyfromSeed(
    ffi.Pointer<ffi.Char> seed,
  ) {
    return _KeyfromSeed(
      seed,
    );
  }

  late final _KeyfromSeedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('KeyfromSeed');
  late final _KeyfromSeed = _KeyfromSeedPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void InitTonApi(
    ffi.Pointer<ffi.Char> dev,
  ) {
    return _InitTonApi(
      dev,
    );
  }

  late final _InitTonApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'InitTonApi');
  late final _InitTonApi =
      _InitTonApiPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int GetEnv() {
    return _GetEnv();
  }

  late final _GetEnvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetEnv');
  late final _GetEnv = _GetEnvPtr.asFunction<int Function()>();

  void ChangeV42() {
    return _ChangeV42();
  }

  late final _ChangeV42Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ChangeV42');
  late final _ChangeV42 = _ChangeV42Ptr.asFunction<void Function()>();

  void ChangeV32() {
    return _ChangeV32();
  }

  late final _ChangeV32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ChangeV32');
  late final _ChangeV32 = _ChangeV32Ptr.asFunction<void Function()>();

  void ChangeV31() {
    return _ChangeV31();
  }

  late final _ChangeV31Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ChangeV31');
  late final _ChangeV31 = _ChangeV31Ptr.asFunction<void Function()>();

  void ChangeTonWallet(
    ffi.Pointer<ffi.Char> _secret,
  ) {
    return _ChangeTonWallet(
      _secret,
    );
  }

  late final _ChangeTonWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'ChangeTonWallet');
  late final _ChangeTonWallet =
      _ChangeTonWalletPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TRON_signTron(
    ffi.Pointer<ffi.Char> txId,
    ffi.Pointer<ffi.Char> privateKey,
  ) {
    return _TRON_signTron(
      txId,
      privateKey,
    );
  }

  late final _TRON_signTronPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TRON_signTron');
  late final _TRON_signTron = _TRON_signTronPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TRON_getAccount(
    ffi.Pointer<ffi.Char> privateKey,
  ) {
    return _TRON_getAccount(
      privateKey,
    );
  }

  late final _TRON_getAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TRON_getAccount');
  late final _TRON_getAccount = _TRON_getAccountPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void TRON_transfer(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TRON_transfer(
      privateKey,
      to,
      amount,
    );
  }

  late final _TRON_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TRON_transfer');
  late final _TRON_transfer = _TRON_transferPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TRON_transfer20(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> contract,
  ) {
    return _TRON_transfer20(
      privateKey,
      to,
      contract,
    );
  }

  late final _TRON_transfer20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TRON_transfer20');
  late final _TRON_transfer20 = _TRON_transfer20Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TRON_transfer21(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> contract,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _TRON_transfer21(
      privateKey,
      to,
      contract,
      id,
    );
  }

  late final _TRON_transfer21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TRON_transfer21');
  late final _TRON_transfer21 = _TRON_transfer21Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void TRON_call(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TRON_call(
      privateKey,
      to,
      amount,
    );
  }

  late final _TRON_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TRON_call');
  late final _TRON_call = _TRON_callPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TRON_query(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TRON_query(
      privateKey,
      to,
      amount,
    );
  }

  late final _TRON_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TRON_query');
  late final _TRON_query = _TRON_queryPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ETH_signETH() {
    return _ETH_signETH();
  }

  late final _ETH_signETHPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ETH_signETH');
  late final _ETH_signETH = _ETH_signETHPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> ETH_getAccount() {
    return _ETH_getAccount();
  }

  late final _ETH_getAccountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ETH_getAccount');
  late final _ETH_getAccount =
      _ETH_getAccountPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void ETH_transfer(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _ETH_transfer(
      privateKey,
      to,
      amount,
    );
  }

  late final _ETH_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ETH_transfer');
  late final _ETH_transfer = _ETH_transferPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ETH_transfer20(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> contract,
  ) {
    return _ETH_transfer20(
      privateKey,
      to,
      contract,
    );
  }

  late final _ETH_transfer20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ETH_transfer20');
  late final _ETH_transfer20 = _ETH_transfer20Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ETH_transfer21(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> contract,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _ETH_transfer21(
      privateKey,
      to,
      contract,
      id,
    );
  }

  late final _ETH_transfer21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ETH_transfer21');
  late final _ETH_transfer21 = _ETH_transfer21Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void ETH_call(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _ETH_call(
      privateKey,
      to,
      amount,
    );
  }

  late final _ETH_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ETH_call');
  late final _ETH_call = _ETH_callPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ETH_query(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _ETH_query(
      privateKey,
      to,
      amount,
    );
  }

  late final _ETH_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ETH_query');
  late final _ETH_query = _ETH_queryPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TON_signTON() {
    return _TON_signTON();
  }

  late final _TON_signTONPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('TON_signTON');
  late final _TON_signTON = _TON_signTONPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> TON_createWallet() {
    return _TON_createWallet();
  }

  late final _TON_createWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TON_createWallet');
  late final _TON_createWallet =
      _TON_createWalletPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TON_getAccount(
    ffi.Pointer<ffi.Char> mnemonic,
  ) {
    return _TON_getAccount(
      mnemonic,
    );
  }

  late final _TON_getAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TON_getAccount');
  late final _TON_getAccount = _TON_getAccountPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void TON_transfer(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TON_transfer(
      privateKey,
      to,
      amount,
    );
  }

  late final _TON_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TON_transfer');
  late final _TON_transfer = _TON_transferPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TON_transfer20(
    ffi.Pointer<ffi.Char> token,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
    ffi.Pointer<ffi.Char> decimals,
    ffi.Pointer<ffi.Char> comment,
  ) {
    return _TON_transfer20(
      token,
      to,
      amount,
      decimals,
      comment,
    );
  }

  late final _TON_transfer20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TON_transfer20');
  late final _TON_transfer20 = _TON_transfer20Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TON_transfer21(
    ffi.Pointer<ffi.Char> token,
    ffi.Pointer<ffi.Char> index,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> comment,
  ) {
    return _TON_transfer21(
      token,
      index,
      to,
      comment,
    );
  }

  late final _TON_transfer21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TON_transfer21');
  late final _TON_transfer21 = _TON_transfer21Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void TON_call(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TON_call(
      privateKey,
      to,
      amount,
    );
  }

  late final _TON_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TON_call');
  late final _TON_call = _TON_callPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void TON_query(
    ffi.Pointer<ffi.Char> privateKey,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _TON_query(
      privateKey,
      to,
      amount,
    );
  }

  late final _TON_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('TON_query');
  late final _TON_query = _TON_queryPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void sdkVersion() {
    return _sdkVersion();
  }

  late final _sdkVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sdkVersion');
  late final _sdkVersion = _sdkVersionPtr.asFunction<void Function()>();
}
